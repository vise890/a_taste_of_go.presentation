A taste of Go

Martino Visintin
martino.visintin@thoughtworks.com

* Hello World

.play ./code/hello_world.go

- Go has a familiar semantics (don't be scared)
- It is a small and simple language (1-2 days to get productive in it)
- "A fast, statically typed, compiled language that feels like a dynamically typed, interpreted language"

* Why Go?

- compiler produces *statically* linked binaries (or `.exe`s..) that run everywhere
- compile times are *fast* (compiling on every save is feasible)
- has excellent tooling (test, fmt, vet, ...)
- comprehensive std. library (net/http, crypto, json, ...)
- lots of high-quality libraries (e.g. mongoDB driver is best in class)

* Some code: fibonacci
.play ./code/fibonacci.go

* Some code: FizzBuzz
.play ./code/fizz_buzz.go

* Concurrency: Goroutines

- a goroutine is a go `func` running concurrently with others
- a "lightweight" thread
- very cheap
- multiplexed onto multiple OS threads as needed

.play ./code/goroutines.go /START OMIT/,/END OMIT/

* Concurrency: Channels

.image ./img/go_channels.jpg _ 700

In go, channels are a way to communicate between goroutines.

When sending, a goroutine blocks until the channel is free.
When receiving, a goroutine blocks until there's something to receive.

You can also buffer channels...


* Concurrency: a silly health checker
.play ./code/health_checker.go /START OMIT/,/END OMIT/

* References

.link http://talks.golang.org/2012/concurrency.slide Go concurrency patterns
.link http://confreaks.com/videos/3433-gophercon2014-painless-data-storage-with-mongodb-and-go Painless Data Storage with MongoDB and Go

* Where to go from here

.link http://talks.golang.org talks.golang.org
.link https://github.com/gophercon/2014-talks Gopher Con 2014 talks
.link http://tour.golang.org/ A tour of go
.link http://awesome-go.com/ Awesome go (resources and libraries)
.link https://gobyexample.com/ Go by example
