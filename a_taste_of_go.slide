A taste of Go

Martino Visintin
martino.visintin@thoughtworks.com

* Why Go?

- not the most revolutionary language, but really well executed, and fast.
- easy to learn
- compiler produces *statically* linked binaries (no runtime)
- compile times are *fast*

- plenty of high-quality libraries (e.g. MongoDB driver is best in class)

- construcurrency primitives that make concurrent programming easier

* Hello World

.play ./code/hello_world.go


* Some code: fibonacci
.play ./code/fibonacci.go /START OMIT/,/END OMIT/

* Some code: FizzBuzz
Return: "Fizz" if n is divisible by 3; "Buzz" if n is divisible by 5; "FizzBuzz" if n is divisible by both 5 and 3. N otherwise.

.play ./code/fizz_buzz.go /START OMIT/,/END OMIT/

* Concurrency: Goroutines

- a goroutine is a go `func` running concurrently with others
- a "lightweight" thread
- very cheap (can spin up hundreds of them)
- automatically multiplexed onto multiple OS threads as needed

.play ./code/goroutines.go /START OMIT/,/END OMIT/


* Concurrency: Channels

.image ./img/go_channels.jpg _ 700

In go, channels are a way to *communicate* *between* *goroutines*.

When sending, a goroutine blocks until the channel is empty.
When receiving, a goroutine blocks until there's something to receive.

You can also buffer channels...


* Concurrency: a silly health checker

.play ./code/health_checker.go /START OMIT/,/END OMIT/

* DEMO: A mycraservise

* References

.link http://talks.golang.org/2012/concurrency.slide Go concurrency patterns
.link http://confreaks.com/videos/3433-gophercon2014-painless-data-storage-with-mongodb-and-go Painless Data Storage with MongoDB and Go


* Where to go from here

.link http://tour.golang.org/ An (interactive) tour of go
.link http://golang.org/doc/effective_go.html Effective Go
.link https://gobyexample.com/ Go by example

.link http://talks.golang.org talks.golang.org
.link https://github.com/gophercon/2014-talks Gopher Con 2014 talks

.link http://awesome-go.com/ Awesome go (resources and libraries)
