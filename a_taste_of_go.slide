A taste of Go

Martino Visintin
martino.visintin@thoughtworks.com

* Why Go?

- easy to learn
- compiler produces *statically* *linked* *binaries* (no runtime, run everywhere)
- compile times are *fast*

- plenty of high-quality libraries (e.g. MongoDB driver is best in class [1])

- construcurrency primitives that make concurrent programming easier

* What is Go?

- compiled (with blazing fast compile times)
- low-ish level (e.g. explicit pointers, but garbage collected)
- imperative
- just enough OO (structs and interfaces)
- strong static typing (with type inference)

* Who uses Go?

- Dropbox
- dl.google.com
- hashicorp

* Hello World

.play ./code/hello_world.go

Go is not the most revolutionary language, but it is really well executed, extremely pragmatic and very fast.


* Some code: a "temperature checker"
.play ./code/weather.go /START OMIT/,/END OMIT/

* Concurrency: the go way

* Concurrency: Goroutines

- a goroutine is a go `func` running concurrently with others
- a "lightweight" thread
- very cheap (can spin up hundreds of them)
- automatically multiplexed onto multiple OS threads as needed

.play ./code/goroutines.go /START OMIT/,/END OMIT/


* Concurrency: Channels

.image ./img/go_channels.jpg _ 700

In go, channels are a way to *communicate* *between* *goroutines*.

When sending, a goroutine blocks until the channel is empty.
When receiving, a goroutine blocks until there's something to receive.

You can also buffer channels...


* Concurrency: a silly health checker

.play ./code/health_checker.go /START OMIT/,/END OMIT/

* DEMO: A mycraservise

* Appendix: Go is explicit about pass by reference and by value

* Passing by value
.play ./code/pointers/by_value.go /START OMIT/,/END OMIT/

* Passing by reference
.play ./code/pointers/by_reference.go /START OMIT/,/END OMIT/

* Remarks about pointers
.play ./code/pointers/remarks.go /START OMIT/,/END OMIT/

* References

.link http://confreaks.com/videos/3433-gophercon2014-painless-data-storage-with-mongodb-and-go [1] Painless Data Storage with MongoDB and Go
.link http://talks.golang.org/2012/concurrency.slide Go concurrency patterns


* Where to go from here

.link http://tour.golang.org/ An (interactive) tour of go
.link http://golang.org/doc/effective_go.html Effective Go
.link https://gobyexample.com/ Go by example

.link http://talks.golang.org talks.golang.org
.link https://github.com/gophercon/2014-talks Gopher Con 2014 talks

.link http://awesome-go.com/ Awesome go (resources and libraries)
